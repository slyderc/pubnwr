# VS Code Setup Guide for PubNWR

## Initial Setup

1. Install VS Code
   - Download from https://code.visualstudio.com/
   - During installation, select:
	 - "Add 'Open with Code' action to Windows Explorer file context menu"
	 - "Add 'Open with Code' action to Windows Explorer directory context menu"
	 - "Add to PATH"

2. Install Python Extension Pack
   - Open VS Code
   - Click Extensions icon in left sidebar (or press Ctrl+Shift+X)
   - Search for "Python Extension Pack"
   - Click Install
   - This pack includes:
	 - Python language support
	 - IntelliSense
	 - Linting
	 - Debugging
	 - Code formatting
	 - Unit testing

## Opening PubNWR Project

1. Open Project:
   - File -> Open Folder
   - Navigate to your pubnwr root directory
   - Click "Select Folder"
   - If asked "Do you trust the authors of the files in this folder?", click "Yes"

2. Set Up Python Interpreter:
   - Press Ctrl+Shift+P to open command palette
   - Type "Python: Select Interpreter"
   - Choose your virtual environment (should see 'venv' or similar)
   - If no virtual environment exists:
	 ```bash
	 # In VS Code's terminal (Ctrl+`)
	 python -m venv venv
	 source venv/bin/activate  # On Linux/Mac
	 # or
	 .\venv\Scripts\activate  # On Windows
	 pip install -r requirements.txt
	 ```

## Helpful VS Code Features

1. Integrated Terminal:
   - Press Ctrl+` to open/close
   - Use for running commands, pip install, etc.
   - Can have multiple terminals (use + button)

2. File Explorer (Ctrl+Shift+E):
   - Shows project structure
   - Right-click for file operations
   - Create new files/folders
   - Use .gitignore to hide unwanted files

3. Source Control (Ctrl+Shift+G):
   - View changed files
   - Stage changes
   - Commit changes
   - Push/pull from GitHub
   - View file history

4. Quick Open (Ctrl+P):
   - Quickly find files
   - Type '>' for commands
   - Type '@' to search within file
   - Type '#' to search across project

## Useful VS Code Settings

1. Create settings files:
   ```bash
   mkdir .vscode
   touch .vscode/settings.json
   touch .vscode/launch.json
   ```

2. settings.json:
```json
{
	// Python settings
	"python.defaultInterpreterPath": "${workspaceFolder}/venv/bin/python",
	"python.linting.enabled": true,
	"python.linting.pylintEnabled": true,
	"python.formatting.provider": "black",
	
	// Editor settings
	"editor.formatOnSave": true,
	"editor.rulers": [80, 100],
	"editor.renderWhitespace": "all",
	"editor.suggestSelection": "first",
	"files.trimTrailingWhitespace": true,
	
	// File explorer
	"files.exclude": {
		"**/__pycache__": true,
		"**/*.pyc": true,
		".pytest_cache": true,
		".coverage": true
	},
	
	// Terminal
	"terminal.integrated.defaultProfile.linux": "bash",
	"terminal.integrated.defaultProfile.windows": "Command Prompt",
	
	// Git
	"git.enableSmartCommit": true,
	"git.autofetch": true,
	
	// Project specific
	"python.testing.pytestEnabled": true,
	"python.testing.unittestEnabled": false,
	"python.testing.nosetestsEnabled": false,
	"python.testing.pytestArgs": [
		"tests"
	]
}
```

## Keyboard Shortcuts Worth Learning

1. File Navigation:
   - Ctrl+P: Quick Open files
   - Ctrl+Shift+P: Command Palette
   - Ctrl+Tab: Switch between open files
   - Alt+← / Alt+→: Navigate back/forward

2. Editing:
   - Alt+Up/Down: Move line up/down
   - Shift+Alt+Up/Down: Copy line up/down
   - Ctrl+/ : Comment/uncomment line
   - Ctrl+Space: Trigger suggestions
   - F2: Rename symbol
   - Ctrl+D: Select next occurrence
   - Alt+Click: Add cursor

3. Terminal/Debug:
   - Ctrl+`: Toggle terminal
   - F5: Start debugging
   - F9: Toggle breakpoint
   - F10: Step over
   - F11: Step into

## Recommended Workflow Features

1. IntelliSense:
   - Automatic import suggestions
   - Function parameter hints
   - Method completion
   - Variable type hints

2. Problem Detection:
   - Red squiggles for errors
   - Yellow squiggles for warnings
   - Click lightbulb for quick fixes
   - Problems panel (Ctrl+Shift+M)

3. Git Integration:
   - Source Control panel
   - Inline blame annotations
   - Branch creation/switching
   - Commit staging
   - Push/pull operations

4. Debugging:
   - Set breakpoints
   - Watch variables
   - Step through code
   - View call stack
   - Inspect variables

## Project-Specific Tips

1. Running PubNWR:
   - Use integrated terminal
   - Debug configuration for breakpoints
   - Watch log files in real-time
   - Monitor file changes

2. File Organization:
   - Use "Go to Definition" (F12)
   - Use "Find All References" (Shift+F12)
   - Use "Peek Definition" (Alt+F12)
   - Use workspace symbols (Ctrl+T)

3. Configuration:
   - Edit config files with schema validation
   - Use multi-cursor for bulk edits
   - Split editor for comparing files
   - Use integrated diff viewer

4. Testing:
   - Run tests from explorer
   - Debug tests
   - View test coverage
   - Test output in terminal

These features will help you navigate, edit, and debug the PubNWR codebase more effectively in VS Code.








# Using Claude with VS Code for PubNWR Development

## Setup Instructions

1. Install Extension:
   - Open VS Code Extensions (Ctrl+Shift+X)
   - Search for "Anthropic Claude"
   - Install extension by Anton Osika
   - Reload VS Code if prompted

2. API Key Configuration:
   - Get API key from https://console.anthropic.com/
   - In VS Code: Ctrl+Shift+P
   - Type "Claude: Set API Key"
   - Enter your API key
   - Key is stored securely in VS Code settings

## Basic Usage

1. Quick Code Questions:
   - Highlight code section
   - Press Ctrl+Shift+I
   - Ask question about highlighted code
   - Or right-click and select "Ask Claude"

2. Claude Chat Panel:
   - Open with Ctrl+Shift+P, type "Claude: Open Chat"
   - Persistent chat interface
   - Supports code snippets and file references
   - Maintains context within session

## Useful Commands

1. Code Review:
```
/review
# Highlight code and use this command for a detailed review
```

2. Code Explanation:
```
/explain
# Explains highlighted code section
```

3. Documentation Help:
```
/doc
# Generates documentation for highlighted code
```

4. Bug Finding:
```
/debug
# Analyzes code for potential issues
```

## PubNWR-Specific Usage Examples

1. Code Review for Track Processing:
```python
# Highlight track processing code and ask:
"Can you review this track processing logic for potential edge cases?"
```

2. Configuration Validation:
```python
# Show config handling code and ask:
"Is this configuration validation comprehensive enough?"
```

3. Error Handling Review:
```python
# Highlight error handling and ask:
"How can we make this error handling more robust?"
```

4. Database Query Optimization:
```python
# Show database queries and ask:
"Can these queries be optimized?"
```

## Best Practices for Using Claude in VS Code

1. Provide Context:
   - Include relevant code sections
   - Mention related files or functions
   - Explain what you're trying to achieve

2. Ask Specific Questions:
   Instead of:
   "Is this code good?"
   Try:
   "Can you check if this code properly handles FTP timeout scenarios?"

3. Iterative Development:
   - Show changes you've made
   - Ask for review of specific modifications
   - Get suggestions for improvements

4. Documentation Help:
   - Ask for docstring suggestions
   - Get help with README updates
   - Request examples for unclear sections

5. Debugging Assistance:
   - Share error messages
   - Provide relevant log output
   - Describe expected vs actual behavior

## Example Interactions

1. Code Review Request:
```
"I've updated the artwork handling in playout_handler.py to use a default image. 
[paste code]
Can you review these changes and suggest any improvements?"
```

2. Error Handling:
```
"Here's the error I'm getting with FTP file monitoring:
[paste error]
Here's the relevant code:
[paste code]
What might be causing this?"
```

3. Feature Implementation:
```
"I want to add listener statistics tracking. Here's my proposed database schema:
[paste schema]
Does this look complete? What fields might I be missing?"
```

4. Documentation:
```
"I've added this new function for handling program transitions:
[paste function]
Can you help me write a comprehensive docstring for it?"
```

## Tips for Effective Collaboration

1. Sharing Context:
   - Use workspace file references
   - Include relevant config settings
   - Mention related functions/modules

2. Code Evolution:
   - Show before/after changes
   - Explain reasoning behind changes
   - Ask for alternative approaches

3. Troubleshooting:
   - Share full error messages
   - Include stack traces
   - Describe steps to reproduce

4. Feature Development:
   - Outline requirements
   - Show proposed implementation
   - Ask for design feedback

## Maintaining Project Knowledge

1. Save Important Discussions:
   - Copy key insights to comments
   - Update documentation with learned solutions
   - Save common solutions for reference

2. Building Project Context:
   - Share project structure when relevant
   - Reference previous changes
   - Maintain list of key design decisions

Remember: Claude starts fresh in each session, so provide necessary context about PubNWR when asking questions. The more specific and detailed your questions, the more helpful the responses will be.













## Development Environment Setup

### VS Code Configuration
1. Recommended Extensions:
   - Python (Microsoft)
   - Pylance
   - Python Test Explorer
   - GitLens
   - Python Docstring Generator
   - autoDocstring
   - Better Comments
   - Error Lens

2. Workspace Settings (.vscode/settings.json):
```json
{
	"python.linting.enabled": true,
	"python.linting.pylintEnabled": true,
	"python.formatting.provider": "black",
	"editor.formatOnSave": true,
	"python.testing.pytestEnabled": true,
	"python.analysis.typeCheckingMode": "basic",
	"files.exclude": {
		"**/__pycache__": true,
		"**/*.pyc": true
	}
}
```

3. Launch Configuration (.vscode/launch.json):
```json
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Python: PubNWR",
			"type": "python",
			"request": "launch",
			"program": "${workspaceFolder}/src/main.py",
			"args": ["/etc/pubnwr_MYRIAD.ini"],
			"console": "integratedTerminal",
			"justMyCode": true
		}
	]
}
```

### Git Setup

1. Initialize Repository:
```bash
git init
```

2. Recommended .gitignore:
```
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/

# VS Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Project Specific
/var/log/pubnwr/*.log
/var/lib/pubnwr/*.db
*.jpg
*.png
config/local_config.ini